version: '3.8'

services:
  # -----------------------------
  # 1) Сервис Postgres (Self-hosted Supabase DB)
  # -----------------------------
  postgres:
    image: postgres:14-alpine
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword   # замените на свой надёжный пароль
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -----------------------------
  # 2) Supabase Auth (GoTrue)
  # -----------------------------
  auth:
    image: supabase/gotrue:latest
    restart: always
    env_file: 
      - ./supabase/.env              # файл с ключами и настройками GoTrue
    volumes:
      - ./supabase/config.toml:/etc/gotrue/config.toml:ro
    ports:
      - "9999:9999"                   # прокидываем порт GoTrue (Auth)
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9999/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -----------------------------
  # 3) Redis (ваш сервис)
  # -----------------------------
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/services/docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # -----------------------------
  # 4) RabbitMQ (ваш сервис)
  # -----------------------------
  rabbitmq:
    image: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # -----------------------------
  # 5) Ваш backend (Django/FastAPI/etc)
  # -----------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend/.env:/app/.env:ro
    env_file:
      - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - SUPABASE_URL=http://auth:9999         # URL Supabase Auth (GoTrue)
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY} # возьмите из supabase/.env
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      worker:
        condition: service_started

  # -----------------------------
  # 6) Ваш worker (Dramatiq и т. п.)
  # -----------------------------
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -m dramatiq run_agent_background
    volumes:
      - ./backend/.env:/app/.env:ro
    env_file:
      - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - SUPABASE_URL=http://auth:9999
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # -----------------------------
  # 7) Ваш frontend (Next.js)
  # -----------------------------
  frontend:
    init: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/.env.local:/app/.env.local:ro
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=http://auth:9999       # чтобы Next.js знал, куда обращаться
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    command: ["npm", "run", "start"]
    depends_on:
      - backend

volumes:
  pgdata:
  redis_data:
  rabbitmq_data:
